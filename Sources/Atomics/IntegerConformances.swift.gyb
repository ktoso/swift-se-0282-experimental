//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2020 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//
%{
  from gyb_utils import autogenerated_warning

  def atomicTypes():
    return ["Int", "Int64", "Int32", "Int16", "Int8",
            "UInt", "UInt64", "UInt32", "UInt16", "UInt8"]

  def lowerFirst(str):
    return str[:1].lower() + str[1:] if str else ""

  def argLabel(label):
    return label + ": " if label <> "_" else ""

  integerOperations = [
    # Swift name,         C name,     operator, label,  doc
    ('WrappingIncrement', 'add',      '&+',     "by",   "wrapping add"),
    ('WrappingDecrement', 'sub',      '&-',     "by",   "wrapping subtract"),
    ('BitwiseAnd',        'and',      '&',      "with", "bitwise and"),
    ('BitwiseOr',         'or',       '|',      "with", "bitwise or"),
    ('BitwiseXor',        'xor',      '^',      "with", "bitwise xor")
  ]

  def loadOrderings():
    return [
      # Swift enum case,         C order
      ('relaxed',                'relaxed'),
      ('acquiring',              'acquire'),
      ('sequentiallyConsistent', 'seq_cst'),
    ]

  def storeOrderings():
    return [
      # Swift enum case,         C order
      ('relaxed',                'relaxed'),
      ('releasing',              'release'),
      ('sequentiallyConsistent', 'seq_cst'),
  ]

  def updateOrderings():
    return [
      # Swift enum case,         C order     fail order
      ('relaxed',                'relaxed',  'relaxed'),
      ('acquiring',              'acquire',  'acquire'),
      ('releasing',              'release',  'relaxed'),
      ('acquiringAndReleasing',  'acq_rel',  'acquire'),
      ('sequentiallyConsistent', 'seq_cst',  'seq_cst'),
  ]

  def shimOrders(rmw, load): # See llvm/Support/AtomicOrdering.h
    def max(rmw, load):
      if load == "acquire":
        if rmw == "relaxed":
          return "acquire"
        if rmw == "release":
          return "acq_rel"
      if load == "seq_cst":
        return "seq_cst"
      return rmw
    return max(rmw, load) + "_" + load

}%
${autogenerated_warning()}

import _AtomicsShims

% for swiftType in atomicTypes():
extension ${swiftType}: AtomicInteger {
  public struct AtomicRepresentation {
    public typealias Value = ${swiftType}

    @usableFromInline
    var _storage: _Atomic${swiftType}Storage

    @inline(__always) @_alwaysEmitIntoClient
    public init(_ value: Value) {
      self._storage = _sa_prepare_${swiftType}(value)
    }

    @inline(__always) @_alwaysEmitIntoClient
    public func dispose() -> Value {
      _sa_dispose_${swiftType}(_storage)
    }
  }
}

extension ${swiftType}.AtomicRepresentation {
  @_transparent @_alwaysEmitIntoClient
  @usableFromInline
  static func _extract(
    _ ptr: UnsafeMutablePointer<Self>
  ) -> UnsafeMutablePointer<_Atomic${swiftType}Storage> {
    // `Self` is layout-compatible with its only stored property.
    return UnsafeMutableRawPointer(ptr)
      .assumingMemoryBound(to: _Atomic${swiftType}Storage.self)
  }
}

extension ${swiftType}.AtomicRepresentation: AtomicIntegerStorage {
  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicLoad(
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicLoadOrdering
  ) -> Value {
    switch ordering {
% for (swiftOrder, shimOrder) in loadOrderings():
    case .${swiftOrder}:
      return _sa_load_${shimOrder}_${swiftType}(_extract(pointer))
% end
    default:
      fatalError("Unsupported ordering")
    }
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicStore(
    _ desired: Value,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicStoreOrdering
  ) {
    switch ordering {
% for (swiftOrder, shimOrder) in storeOrderings():
    case .${swiftOrder}:
      _sa_store_${shimOrder}_${swiftType}(_extract(pointer), desired)
% end
    default:
      fatalError("Unsupported ordering")
    }
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicExchange(
    _ desired: Value,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> Value {
    switch ordering {
% for (swiftOrder, shimOrder, _) in updateOrderings():
    case .${swiftOrder}:
      return _sa_exchange_${shimOrder}_${swiftType}(_extract(pointer), desired)
% end
    default:
      fatalError("Unsupported ordering")
    }
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicCompareExchange(
    expected: Value,
    desired: Value,
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> (exchanged: Bool, original: Value) {
    var expected = expected
    let exchanged: Bool
    switch ordering {
% for (swiftOrder, shimOrder, failOrder) in updateOrderings():
    case .${swiftOrder}:
      exchanged = _sa_cmpxchg_strong_${shimOrder}_${failOrder}_${swiftType}(
        _extract(pointer),
        &expected, desired)
% end
    default:
      fatalError("Unsupported ordering")
    }
    return (exchanged, expected)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicCompareExchange(
    expected: Value,
    desired: Value,
    at pointer: UnsafeMutablePointer<Self>,
    successOrdering: AtomicUpdateOrdering,
    failureOrdering: AtomicLoadOrdering
  ) -> (exchanged: Bool, original: Value) {
    var expected = expected
    let exchanged: Bool
    // FIXME: stdatomic.h (and LLVM underneath) doesn't support
    // arbitrary ordering combinations yet, so upgrade the success
    // ordering when necessary so that it is at least as "strong" as
    // the failure case.
    switch (successOrdering, failureOrdering) {
% for (swiftSuccess, shimSuccess, _) in updateOrderings():
%   for (swiftFailure, shimFailure) in loadOrderings():
    case (.${swiftSuccess}, .${swiftFailure}):
      exchanged = _sa_cmpxchg_strong_${shimOrders(shimSuccess, shimFailure)}_${swiftType}(
        _extract(pointer),
        &expected,
        desired)
%   end
% end
    default:
      fatalError("Unsupported ordering")
    }
    return (exchanged, expected)
  }

  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  public static func atomicWeakCompareExchange(
    expected: Value,
    desired: Value,
    at pointer: UnsafeMutablePointer<Self>,
    successOrdering: AtomicUpdateOrdering,
    failureOrdering: AtomicLoadOrdering
  ) -> (exchanged: Bool, original: Value) {
    var expected = expected
    let exchanged: Bool
    // FIXME: stdatomic.h (and LLVM underneath) doesn't support
    // arbitrary ordering combinations yet, so upgrade the success
    // ordering when necessary so that it is at least as "strong" as
    // the failure case.
    switch (successOrdering, failureOrdering) {
% for (swiftSuccess, shimSuccess, _) in updateOrderings():
%   for (swiftFailure, shimFailure) in loadOrderings():
    case (.${swiftSuccess}, .${swiftFailure}):
      exchanged = _sa_cmpxchg_weak_${shimOrders(shimSuccess, shimFailure)}_${swiftType}(
        _extract(pointer),
        &expected,
        desired)
%   end
% end
    default:
      fatalError("Unsupported ordering")
    }
    return (exchanged, expected)
  }

% for (name, cname, op, label, doc) in integerOperations:
% defaultValue = " = 1" if label <> "" else ""
  @_semantics("atomics.requires_constant_orderings")
  @_transparent @_alwaysEmitIntoClient
  @discardableResult
  public static func atomicLoadThen${name}(
    ${label} operand: Value${defaultValue},
    at pointer: UnsafeMutablePointer<Self>,
    ordering: AtomicUpdateOrdering
  ) -> Value {
    switch ordering {
% for (swiftOrder, shimOrder, _) in updateOrderings():
    case .${swiftOrder}:
      return _sa_fetch_${cname}_${shimOrder}_${swiftType}(
        _extract(pointer),
        operand)
% end
    default:
      fatalError("Unsupported ordering")
    }
  }
% end
}
% end
